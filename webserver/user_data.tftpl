#!/bin/sh

exec > /var/log/user-data.log 2>&1
apt update
apt upgrade -y
apt install -y python3-pip python3-venv nginx git

cd /var/www/html && curl -L https://github.com/Saverio001/jo-condor/releases/latest/download/public.tgz | tar zxvf -


# --- 2. Application Setup ---
# Define project variables - 
REPO_URL="https://github.com/Saverio001/fastapi_crud"
PROJECT_DIR="/home/ubuntu/api_server"
VENV_DIR="$PROJECT_DIR/venv"
USER="ubuntu" # Running on a standard Ubuntu AMI

# Clone the application from GitHub
git clone $REPO_URL $PROJECT_DIR
chown -R $USER:$USER $PROJECT_DIR

# Create and activate a Python virtual environment
python3 -m venv $VENV_DIR

# Install Python dependencies from requirements.txt
$VENV_DIR/bin/pip install --no-cache-dir -r $PROJECT_DIR/requirements.txt
$VENV_DIR/bin/pip install  --no-cache-dir uvicorn gunicorn # Ensure ASGI servers are installed


# --- 3. Create the Systemd Service ---
# This will manage the Uvicorn process for our FastAPI app

cat > /etc/systemd/system/fastapi_app.service << EOF
[Unit]
Description=Gunicorn instance to serve FastAPI app
After=network.target

[Service]
User=$USER
Group=www-data
WorkingDirectory=$PROJECT_DIR
Environment="PATH=$VENV_DIR/bin"
# Gunicorn is a battle-tested process manager. We use it to run Uvicorn workers.
# This provides better process management and scaling capabilities.
ExecStart=$VENV_DIR/bin/gunicorn -w 2 -k uvicorn.workers.UvicornWorker -b 127.0.0.1:8000 app.main:app

Restart=always
RestartSec=3

[Install]
WantedBy=multi-user.target
EOF

# --- 4. Configure Nginx as a Reverse Proxy ---
# This will forward public traffic from port 80 to our app on port 8000

cat > /etc/nginx/sites-available/fastapi_app << EOF
server {
    listen 80 default_server;
    server_name _; # Or your EC2 public IP
    root /var/www/html;
    location / {
	    # First attempt to serve request as file, then
	    # as directory, then fall back to displaying a 404.
	    try_files \$uri \$uri/ =404;
	}
    location /todo/ {
        proxy_pass http://localhost:8000/;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

# Enable the new Nginx configuration by creating a symbolic link
ln -s /etc/nginx/sites-available/fastapi_app /etc/nginx/sites-enabled/
rm /etc/nginx/sites-enabled/default

# Test Nginx configuration for syntax errors
nginx -t

# --- 5. Start and Enable the Services ---
# Reload systemd to recognize the new service file
systemctl daemon-reload
# Start our FastAPI application service now
systemctl start fastapi_app
# Enable the service to start automatically on boot
systemctl enable fastapi_app

# Restart Nginx to apply the new configuration
systemctl restart nginx

